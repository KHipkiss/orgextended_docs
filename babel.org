* Source Block Execution
    There are several names associated with the ability to execute a source block from within an org document.
    The tech that backs most of this ability is called babel. It has as its primary goal the ideas of literate programming
    and reproducible research. What has made it a popular feature is the combination of babel with many of the other emacs features.

    [[https://orgmode.org/worg/org-contrib/babel/][Babel Active Code In OrgMode]]

    As some examples:

    - Using babel with tools like gnuplot, plantuml, ditaa and graphviz allows presenters to build diagrams dynamically from their notes.
    - The integration with tools like TRAMP in emacs allows developers to dynamically build reports from running processes on remote boxes.
    - Emacs ledger mode and the org mode spreadsheets have empowered some org mode users to build complex budget reports from their financial data.
    - Clocking and some of the project management tools in org mode have allowed contractors to dynamically build timesheets from work notes.

    Babel really made orgmode the original jupyt*r notebook.

** Basic Usage

    Babel treats a source block in an org document as an active function call that can be called in various ways.

    Here we have a basic python source block:

    #+BEGIN_EXAMPLE
      ##+BEGIN_SRC python :var x=5
        print(str(x))
      ##+END_SRC
    #+END_EXAMPLE

    There are a couple of things of note here:

    1. The source block states what language it belongs to, in this case python.
    2. We have specified a variable x that is set to the value of 5.
    3. We are able to access that variable from within the source block.

    Executing this source block will produce a #+RESULTS comment:

    #+BEGIN_EXAMPLE
     #+RESULTS:
     : 5
    #+END_EXAMPLE

** Variables
    Variables can come from a few different sources other than the source block fence itself.
    Variales can be in property blocks or property comments as seen below:

    #+BEGIN_EXAMPLE
      :PROPERTIES:
      :header-args:           :var g=global
      :header-args:python:    :var x=5
      :var: v=10
      :END: 

      #+PROPERTY: header-args: :var y=11
      #+PROPERTY: header-args:python: :var z=12
          
    #+END_EXAMPLE   

    Language specific variables can be defined as well using the language suffix

** Inputs
    While variables are nice, babel becomes even more useful when connected to data tables and lists in your documents.
    Tables and lists can both have a name. This name allows them to be referenced as the source of a variable.

    #+BEGIN_EXAMPLE
      #+NAME: my-source-block
      | name  | value |
      | Hello | 25    |
      | World | 42    |

      ##+BEGIN_SRC python :var DATA=my-source-block
        print(DATA)
      ##+END_SRC

      #+RESULTS:
      : [['name', 'value'], ['Hello', 25], ['World', 42]]
    #+END_EXAMPLE

** Execution Types
    Up till now we have been ignoring one of the important parts of babel which is the execution type.
    Babel supports 2 execution modes:

    - Output - This is the default and what we have seen so far. The stdout of a source block is captured and used as the return value.
    - Value - This is more the traditional function call style. 

    #+BEGIN_EXAMPLE
      ##+BEGIN_SRC python :results value
        return 5     
      ##+END_SRC   

      #+RESULTS:
      : 5
    #+END_EXAMPLE

** Results

    The results keyword really has 4 dimensions
    - Execution Type :: output vs value - what do we capture?
    - Output Handling :: table vs list vs raw - does the output get interpreted as something else?
    - Formatting :: verbatim vs html vs org vs drawer vs code - do we wrap the output in something?
    - Output Mode :: append vs prepend vs silent vs replace - how do we insert the output into the buffer?

    Each results keyword can have a combination of those 4.
    #+BEGIN_EXAMPLE
    ##+BEGIN_SRC python :results output table drawer
      print("Hello World")
    ##+END_SRC

    #+RESULTS:
    :results:
    | Hello | World |
    :end:
    #+END_EXAMPLE

    Here we have formatted the output as a table and put it in a drawer.
    You can also output the results to a file with the :file <filename> parameter.

    Here is some powershell doing the same thing as our python
 
    #+BEGIN_EXAMPLE
    #+NAME: in-table
    | a | b | c | d | e |
    | 1 | 2 | 3 | 4 | 5 |
    | 6 | 7 | 8 | 9 | 0 |
   
    ##+BEGIN_SRC powershell :var DATA=in-table :results table
     $DATA | %{"$_"}
    ##+END_SRC

    #+RESULTS:
    | a | b | c | d | e |
    | 1 | 2 | 3 | 4 | 5 |
    | 6 | 7 | 8 | 9 | 0 |
      
    #+END_EXAMPLE
** Call 

    Org Mode treats source blocks like functions in some strange programming language tapestry.
    The call statements lets you call a source block with a different set of parameters.

    #+BEGIN_SRC org
      #+CALL: name-to-call(x=5)
    #+END_SRC

** Chaining Source Blocks
    From powershell to python to gnuplot

** Formatting Output
    drawers, blocks and others

** Full Circle SBE
    Table Formulas can use source blocks.

** Tangle and Export
    Ripping source out of a document

** NoWeb
    Yet another way managing source.