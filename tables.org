* Tables and Spreadsheets
	Org Extended has some support for org mode tables. True org tables support would allow for arbitrary
	emacs lisp to run as cell formulas within the table. Org Extended is not likely to build a lisp
	interpreter within sublime. I am less likely to support the full gamut of useful lisp functions.

	That said, a lot can be done with basic calc support in sublime!

	[[file:images/table_formulas.gif]] 

	There are a number of things that make org tables super powerful:

	- Org has a ton of power for editing and dynamically modifying tables, in plain text!
	- Org supports a full computation engine built on emacs calc. We have a simplified version of that.
	- Org tables can reference other tables. (Much like tabs in a spreadsheet)
	- Org tables can act as inputs to babel really opening up your options for living documents. (we do not have this yet)
	- Org tables can be the output of babel, again, really comming full circle on things. (we do not have this yet)
	- Org can easily import csv files and other document types into your documents. (we have some support here)

	That said, using the spreadsheet like capabilities of Org Extended will take a little effort on your part

** Basic Editing
	Tab and Shift Tab are your friend. To start building a table, put a vertical bar symbol followed by some text and press tab.
	Voila, you have a table!

	[[file:images/table_basic_creation.gif]] 

	There is more. You can import a table or create a blank WxH table. But we will cover those later.

** Adding Rows and Columns

	Next we need to extend our table. It is a pain to have to go over to the righthand side of the table to add a column.
	Org lets you insert a column almost anywhere!

	#+BEGIN_EXAMPLE
	Shift+Alt+Right Arrow  --> Add a Col (pull it out, text grows to the right in english)
	Shift+Alt+Left Arrow   --> Remove a Col (push it back)
	#+END_EXAMPLE

	The same works vertically!

	#+BEGIN_EXAMPLE
	  Shift+Alt+Down Arrow --> Add a row (pull it out, tables grow down right!)
	  Shift+Alt+Up   Arrow --> Remove a row (push it back)
	#+END_EXAMPLE

	[[file:images/table_add_delete_cells.gif]] 

** Moving Cells Around
	So now you realize that you laid out your table poorly and want to move the content around.
	#+BEGIN_EXAMPLE
	Alt+Right Arrow  --> Move this row right
	Alt+Left Arrow   --> Move this row left
	#+END_EXAMPLE

	The same works vertically!

	#+BEGIN_EXAMPLE
	  Alt+Down Arrow --> Move this row down
	  Alt+Up   Arrow --> Move this row up 
	#+END_EXAMPLE

	The cool thing you will see later is that org tries to preserve formula correctness as well when you move your
	cells around. But more on that in a sec.

	[[file:images/table_moving_cells_around.gif]]  

** Adding a Formula

	Okay so now you have a table with some content that you hand authored. It's time to start adding some smarts to your table!

	First a quick demonstration. Org, like a spreadsheet can take a formula in a cell.
	Here is an example: 

	#+BEGIN_SRC python
	 =vmean($2..$3) 
	#+END_SRC

	[[file:images/table_formulas_insert.gif]] 

	To regisster the formula you have to tell org about it, otherwise the formula is just text. Org stores the formula in
	a TBLFM comment at the bottom of the table. No exceptions that comment needs to be at the bottom of the table.

	In this case we added a column formula. You can add a targetted formula by using:

	#+BEGIN_EXAMPLE
	  := - single cell formula
	  =  - column formula
	  >= - row formula
	#+END_EXAMPLE

	You will notice org added some funny symbols to reference the target cell. We also used what looks like a range of cells.
	Org has a whole gamut of these, we support a subset.

	Org use a row and column notation that has the following structure:
	#+BEGIN_EXAMPLE
	  @ <ROW> $ <COL>
	#+END_EXAMPLE

	Some examples might include:

	- ‘@2$3’ :: 2nd row, 3rd column
    - ‘$5’ :: column 5 in the current row
	- ‘@2’ :: current column, row 2
	- ‘@-1$-3’ :: field one row up, three columns to the left
	- ‘@>$5’ :: field in the last row, in column 5

	Range syntax is also supported:

	- ‘$1..$3’ :: first three fields in the current row
	- ‘$<<<..$>>’ :: start in third column, continue to the last but one
	- ‘@2$1..@4$3’ :: nine fields between these two fields
	- ‘@-1$-2..@-1’ :: 3 fields in the row above, starting from 2 columns on the left	

	[[https://orgmode.org/manual/References.html#References][OrgMode Table References]] 
	[[https://orgmode.org/manual/Field-and-range-formulas.html#Field-and-range-formulas][Table Range References]]

	To help with figuring out the indexes of your rows and columns Org Extended has a set of phantoms it can pop up to
	show you the layout of your table:

	- Org Show Table Rows - Will show the layout of your table
	- Org Hide Table Rows - Will hide the phantoms. These can be a little distracting so it helps to be able to turn them off

	[[file:images/table_show_table_rows.gif.gif]]

** Evaluating Your Formula
	Once you have a few formulas you might want to re-evaluate all your formulas.
	You do this with the org Do What I Mean execute method: 

	#+BEGIN_EXAMPLE
	Alt + o + c + c 
	OR
	<space> c c  
	#+END_EXAMPLE

	This will re-evaluate all references in the table.

** Symbols and Constants
	Sometimes when doing a calculation it is a bit of a pain to work with a gamut of numbers and it helps to be able to assign a meaningful name.
	The CONSTANTS comment allows you to created named symbols that can be referenced from your tables:

	#+BEGIN_EXAMPLE
	  #+CONSTANTS: pi=3.1415926 c=299792458
	#+END_EXAMPLE

    Note the lack of spaces and equal signs. These can now be referenced as symbols in your expressions:

    #+BEGIN_SRC python
      =$1*$pi
    #+END_SRC

    Sometimes, when planning or doing other operations you have stored some valuable data as properties in your document. You can access that data using
    property symbols:

    #+BEGIN_SRC python
      =$1*$PROP_propname
    #+END_SRC

    The $PROP_ prefix is added by the system to all properties in your document.

    In addition, there are two special properties that can be used:
    #+BEGIN_SRC python
      $# - Current column index of the document
      @# - Current row index of the document
    #+END_SRC
** Formatting Output

	In Emacs org mode formulas run inside calc. Calc has quite a few modes and control systems.
	For this reason you can append a semi colon to your formula and add control flags that control how
	calc operates when evaluating your expression. We do not have this situation. Our parser is OrgExtended specific
	and as such most of the control flags for calc are meaningless. That said, there are a couple of flags that are pretty useful:

	- N - Adding this flag to a formula will treat all empty cells as a 0 value.
	- %.#f - This lets you control the precision of floating point output. It is often visually disturbing to have many decimal places
	         in your output. With this you can limit the output to a smaller set of decimal places.

  Here we are limiting our output to 3 decimal places:

	#+BEGIN_EXAMPLE
 	| a     | b     | c   | d     | e     |
 	| 1     | 1     |     | 1     | 1     |
 	| 0.476 | 0.476 | 0.0 | 0.476 | 0.476 |
 	#+TBLFM:@3=@2/2.1;N%.3f
	#+END_EXAMPLE

** Remote References
	Tables become even more useful when you can reference between tables!
	The remote function lets you do just that.

	#+BEGIN_SRC python
	  =remote('TableName',@2$3)
	#+END_SRC


	#+BEGIN_EXAMPLE
	  #+NAME: TableName
	  | a | b | c | d |
	  | 1 | 2 | 3 | 4 |

	  Another table somewhere:
	  | a | b | c                             | d |
	  |   |   | >=remote('TableName',@2$3)*10 |   |
	#+END_EXAMPLE

** Functions

  - second :: Not Yet Documented 
  - tan :: Not Yet Documented 
  - int :: int(x=0) -> integer
      int(x, base=10) -> integer
      
      Convert a number or string to an integer, or return 0 if no arguments
      are given.  If x is a number, return x.__int__().  For floating point
      numbers, this truncates towards zero.
      
      If x is not a number or if base is given, then x must be a string,
      bytes, or bytearray instance representing an integer literal in the
      given base.  The literal can be preceded by '+' or '-' and be surrounded
      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
      Base 0 means to interpret the base from the string as an integer literal.
      >>> int('0b100', base=0)
      4
  - randomf :: Not Yet Documented 
  - vmax :: Not Yet Documented 
  - time :: Return the current time from a datetime object time(datetime)
  - ceil :: Not Yet Documented 
  - sin :: Not Yet Documented 
  - vmin :: Not Yet Documented 
  - yearday :: Not Yet Documented 
  - exp :: Not Yet Documented 
  - month :: Not Yet Documented 
  - floor :: Not Yet Documented 
  - abs :: Not Yet Documented 
  - remote :: Not Yet Documented 
  - randint ::  return a random int below <top> 
  - hour :: Not Yet Documented 
  - now :: Returns the current date time
  - day :: Not Yet Documented 
  - round :: Round to the nearest integer
  - minute :: Not Yet Documented 
  - duration :: Not Yet Documented 
  - random :: Not Yet Documented 
  - vmean :: Not Yet Documented 
  - year :: Not Yet Documented 
  - trunc :: Round down to the nearest int
  - float :: float(x) -> floating point number
      
      Convert a string or number to a floating point number, if possible.
  - str :: str(object='') -> str
      str(bytes_or_buffer[, encoding[, errors]]) -> str
      
      Create a new string object from the given object. If encoding or
      errors is specified, then the object must expose a data buffer
      that will be decoded using the given encoding and error handler.
      Otherwise, returns the result of object.__str__() (if defined)
      or repr(object).
      encoding defaults to sys.getdefaultencoding().
      errors defaults to 'strict'.
  - cos :: Not Yet Documented 
  - vmedian :: Not Yet Documented 
  - vsum :: Not Yet Documented 
  - date :: Not Yet Documented 
  - weekday :: Not Yet Documented 
  - rand :: random() -> x in the interval [0, 1).

** Built in Symbols

	The following symbols are available for use in your tables (at the moment)

  - nil :: None 
  - pi :: 3.1415926 
  - False :: False 
  - True :: True 
  - t :: True 
  - true :: True 
  - false :: False 
  - None :: None 

** Advanced Table Features
		Orgmode supports an advanced table mechanism. When using these features
		you need to put symbols in the first column of the table. These symbols are as follows.

		[[https://orgmode.org/manual/Advanced-features.html][OrgMode Advanced Table Features]]

		- # :: Auto compute this row. When you use the table commands to move between cells these cells will be auto computed.
		- * :: Non auto compute cell. Cells in this row will be included when recomputing the table (blank symbol will exclude a row from computation)
		- $ :: defines local table symbols in this row (max=5) that can be used in formulas.
		- _ :: name the cells below this row in this column. Cells can be referenced by name.
		- ^ :: name the cells above this row in this column. Cells can be referenced by name.
		- ! :: name all cells in this column. Cells can be referenced by this name.

    |   |   a   |   b   |    c     |
    |---+-------+-------+----------|
    | # | 0.38  | 0.1   | 0.46     |
    | # | 0.38  | 0.1   | 0.86     |
    | # | 0.03  | 0.6   | 0.01     |
    | * | 0.02  | 0.0   | 0.06     |
    | ^ | hello | world | namedRow |
    | * |       | 0.3   |          |
    |   |       |       |          |
    | _ | below |       |          |
    | # | 3.5   | 0.7   |          |
    | # | 4.5   | 0.9   |          |
    | # | 4.0   | 0.8   |          |
    | # | 2.0   | 0.4   |          |
    | $ | max=5 |       |          |
    #+TBLFM:$hello=rand()*$world;%.2f::$namedRow=rand();%.2f::$3=rand();%.1f::$below=$3*$max

** GNU Plot
	No spreadsheet application would be complete without the ability to graph data.
	Emacs, and now we make that possible with GNU Plot.

	To use it:	

	- install gnuplot
	- Set your gnuplot path:

		#+BEGIN_EXAMPLE
		  "gnuplot": "<fullpathtognuplot.exe>",
		#+END_EXAMPLE

	- Run "Org Plot Table" with cursor on the table

	#+BEGIN_EXAMPLE
    #+PLOT: title:"Citas" ind:1 deps:(3 4) with:lines set:grid file:plot.png
    |    Sede   |  Max   | H-index |  top  |
    |-----------+--------+---------+-------|
    | Sao Paolo |  71.00 |   11.50 |  13.5 |
    | Stockholm | 134.19 |   14.33 | 16.33 |
    | Leeds     | 165.77 |   19.68 | 21.68 |
    | Morelia   | 257.56 |   17.67 | 19.67 |
    | Chile     | 257.72 |   21.39 | 23.39 |
    #+TBLFM:$4=$3+2.0
	#+END_EXAMPLE

	[[file:images/tables_gnuplot.gif]]

